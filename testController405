package com.moneta.test.web.controller;

import java.util.List;
import java.util.Properties;

import javax.annotation.Resource;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.moneta.test.domain.Pagination;
import com.moneta.test.domain.TestVO;
import com.moneta.test.domain.CmtVO;
import com.moneta.test.service.impl.ConnectDB;
import com.moneta.test.service.impl.UtilFileTestService;

@Controller
public class TestController405 {

	@Resource
	private ConnectDB connectDB;
	
	//경로가 있는 프로퍼티 설정값 가져오기
	@Resource
	private Properties configProp;

	// 게시판 읽기 기능
	@RequestMapping("/main5")
	public String method(@RequestParam(defaultValue = "1") int cp, Model model) {
		
		int totalCnt = connectDB.getTotalcount();

		// 지정된 게시글 수 만큼 페이지 읽어오기
		Pagination pagemaker = new Pagination(cp, totalCnt);

		// 페이지처리된 게시글 목록 받아오기
		List<TestVO> list = connectDB.getTestList(pagemaker);
		model.addAttribute("list", list);
		model.addAttribute("page", pagemaker);
		try {
			
//			Pagination pm = new Pagination(cp,searchCnt);
//			//검색 처리된 게시글 목록 받아오기
//			List<TestVO> searchlist = connectDB.getSearchList(pm);
			
			
//			System.out.println("pagemaker>>>"+pagemaker.getEndPage());
		} catch (Exception e) {
			e.printStackTrace();
		}

//		
		return "test/dealingData";
	}

	// 상세 보기 + 댓글 보기
	@RequestMapping("/view")
	public String view(@RequestParam(defaultValue = "1") int cmp, Model model, TestVO vo, CmtVO VO) {
		// 상세보기를 누른 게시글의 조회수 1 늘리기
		connectDB.viewCntPlus(vo);
		TestVO resVO = connectDB.getView(vo);

		// 해당 게시글 내용 뷰단으로 보내기
		model.addAttribute("res", resVO);
//		System.out.println("게시글 내용 보여주기");

		// 총 댓글 수 가져오기
		int cmtTotalCnt = connectDB.getCmtTotalcount(VO);

		// 댓글 페이징 처리
		Pagination cmtPagemaker = new Pagination(cmp, cmtTotalCnt);
		VO.setEndIndex(cmtPagemaker.getEndIndex());
		VO.setStartIndex(cmtPagemaker.getStartIndex());
//		System.out.println("s>>"+VO.getStartIndex()+"e>>"+VO.getEndIndex());
		List<CmtVO> cmtlist = connectDB.getCmtList(VO);

		// 댓글 페이징 처리된 목록 받아오기
//		List<CmtVO> cmtlist = connectDB.getCmtList(VO);
		model.addAttribute("cmtList", cmtlist);

		// 댓글 목록의 페이지 보여주기
//		System.out.println("현재 댓글 페이지" + cmp);
//		System.out.println("댓글 " + cmtlist.size());
		model.addAttribute("cmtPage", cmtPagemaker);

		return "test/view";
	}

	// 댓글 추가하기
	@RequestMapping("/view/uploadCmt")
	public String uploadCmt(Model model, CmtVO VO) {
//		System.out.println("댓글 들어옴" + VO.toString());

		// 댓글 객체 db로 보내기
		int resCmt = connectDB.uploadCmt(VO);
//		System.out.println("코멘트 생성 결과" + resCmt);

		// 경로 끝에 해당 게시글 넘버 받아오기 위해 객체에서 boardseq 추출
		int boardSeq = VO.getBoardSeq();
		String path = "redirect:../view?boardSeq=" + boardSeq;

		return path;
	}

	@RequestMapping("/view/edit")
	public String edit(Model model, TestVO vo) {
		// 수정할 내용 DB에서 가져오기
		TestVO viewVO = connectDB.getView(vo);
		model.addAttribute("res", viewVO);

		// 수정 모드에서 글 양식폼으로 온 것을 알려주기
		model.addAttribute("mode", "edit");

		// 수정할 내용을 담은 글 작성 양식 보여주기
		return "test/create";
	}

	// 수정 기능
	@RequestMapping("/view/editContent")
	public String editContent(Model model, MultipartHttpServletRequest request,
			@RequestParam("fileName") MultipartFile uploadfile) {

		int editedRow;
		TestVO editVO = new TestVO();
		try {
			// System.out.println("then edit" + VO.getRegDt());
//			String boardTitle = request.getParameter("boardTitle");
//			String boardSeq = request.getParameter("boardSeq");
//			System.out.println("boardTitle>"+boardTitle+"\n boardSeq>"+boardSeq);

			if (uploadfile != null) {
				UtilFileTestService utilFile = new UtilFileTestService();

				// 저장된 폴더 이름이 포함된 파일 이름
				String fileName = utilFile.fileUpload(uploadfile, configProp.getProperty("FileUploadPath"));

				// multpart서블릿에서 가져온 정보 testVO에 넣어주기
				editVO.setBoardTitle(request.getParameter("boardTitle"));
				editVO.setNickNm(request.getParameter("nickNm"));
				editVO.setBoardContent(request.getParameter("boardContent"));
				editVO.setBoardSeq(Integer.parseInt(request.getParameter("boardSeq")));
				editVO.setFileName("http://localhost:8080/nas/bbs" + fileName);
				editedRow = connectDB.editSeq(editVO);
			} else {
				// 첨부된 파일이 없을 때 수정 쿼리 보내기
				// 추후 ajax로 처리할 예정
				System.out.println(request.getParameter("boardTitle"));
				System.out.println("수정시 파일 없을때 수정 쿼리 보내기");

				editVO.setBoardTitle(request.getParameter("boardTitle"));
				editVO.setNickNm(request.getParameter("nickNm"));
				editVO.setBoardContent(request.getParameter("boardContent"));
				editVO.setBoardSeq(Integer.parseInt(request.getParameter("boardSeq")));

				editedRow = connectDB.editSeq(editVO);
				System.out.println("수정 완료 ");
			}

			// DB에서 수정이 정상 처리가 안 되었을 경우
			if (editedRow == 0) {
				return null;
			}
//			  model.addAttribute("editedRow", editedRow); 
//			  model.addAttribute("newCont", 0);

		} catch (Exception e) {
			e.printStackTrace();
		}
		;

		// 수정 후 게시판 보여주기
		return "redirect: ../main5";
	}

	// 게시글 삭제 기능
	@RequestMapping("/view/delete")
	public String delete(Model model, TestVO vo) {
		// 삭제할 게시글 넘버가져와서 DB에 보내주기
		int deletedRow = connectDB.deleteSeq(vo);

		// DB에서 삭제 정상처리 후 결과 알림 페이지로 보내기
		model.addAttribute("deletedRow", deletedRow);
		return "test/del";
	}

	// 글 생성 기능
	@RequestMapping("/view/create")
	public String createContent(Model model) {
		// 글 생성 버튼을 눌렀을 경우 글 양식 폼 페이지로 보냄
//		System.out.println("let's write");
		model.addAttribute("mode", "create");
		return "test/create";
	}

	// 글 업로드 기능
	@RequestMapping("/view/uploadContent")
	public String uploadContent(Model model, MultipartHttpServletRequest request,
			@RequestParam("fileUpload") MultipartFile uploadfile) {
		TestVO createVO = new TestVO();

		try {
			// 첨부된 파일이 있을 경우 함께 넣어줌
			if (uploadfile != null) {
				UtilFileTestService utilFile = new UtilFileTestService();
				String fileName = utilFile.fileUpload(uploadfile,configProp.getProperty("FileUploadPath") );
				System.out.println("글생성시파일 업로드, 업로드 성공시 리턴되는 폴더이름 포함 파일 이름:" + fileName);

				createVO.setBoardTitle(request.getParameter("boardTitle"));
				createVO.setNickNm(request.getParameter("nickNm"));
				createVO.setBoardContent(request.getParameter("boardContent"));
				createVO.setFileName("http://localhost:8080/nas/bbs" + fileName);

				// 객체 DB로 보내주기
				int newCont = connectDB.createContent(createVO);

				// 글 생성이 정상 처리되면 리턴 결과를 결과 알림 페이지(생성/수정)에 보내주기
				model.addAttribute("newCont", newCont);

				// 글 수정 리턴 결과값이 안 들어올 때 에러 방지 위해 0 보내주기
				model.addAttribute("editedRow", 0);

			} else {
				// 첨부된 파일이 없을 때 생성 쿼리 보내기
				System.out.println(request.getParameter("boardTitle"));
				System.out.println("생성시 파일 없을때 수정 쿼리 보내기");

				createVO.setBoardTitle(request.getParameter("boardTitle"));
				createVO.setNickNm(request.getParameter("nickNm"));
				createVO.setBoardContent(request.getParameter("boardContent"));

				int newCont = connectDB.createContent(createVO);
				System.out.println("생성 완료 ");

			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		return "test/uploadCompleted";
	}

	//검색 기능
	@RequestMapping("/search")
	public String search(@RequestParam(defaultValue = "1") int cp, Model model, String searchWord) {
		/* pagination pm, Model model */
		try {
			System.out.println("search?" + searchWord);
//			//검색된 게시글 수 받아오기
			int searchCnt = connectDB.getSearchCount(searchWord);
			System.out.println("검색 성공 -> 검색 게시글 수" + searchCnt);
			
//			//지정된 게시글 수 만큼 검색된 게시글 읽어오기 
			Pagination searchPagemaker = new Pagination(cp, searchCnt); 
			searchPagemaker.setSearchWord(searchWord);
			//페이지처리된 게시글 목록 받아오기 
			 List<TestVO> list = connectDB.getSearchList(searchPagemaker); 
			 model.addAttribute("searchList", list);
			 model.addAttribute("searchPagemaker", searchPagemaker);
			 

		} catch (Exception e) {
			e.printStackTrace();
		}

		return "test/searchResult";
	}

}
